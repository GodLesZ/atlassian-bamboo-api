{"version":3,"sources":["Bamboo.js"],"names":[],"mappings":"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","file":"Bamboo.js","sourcesContent":["\"use strict\";\n\nimport request from 'request';\n\n// @TODO: Use Sets instead of arrays\n\n//noinspection JSUnusedGlobalSymbols\nexport default class Bamboo {\n\n    /**\n     * Callback for testLogin\n     *\n     * @typedef {Function} testLoginCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Boolean} result - true if no error\n     */\n    /**\n     * Callback for getLatestSuccessfulBuildNumber\n     *\n     * @typedef {Function} getLatestSuccessfulBuildNumberCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {String|null} result - if no error will return build number\n     */\n    /**\n     * Callback for getLatestBuildStatus\n     *\n     * @typedef {Function} getLatestBuildStatusCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {String|null} state - last result state if no error will return build number\n     * @param {String|null} number - last result number if no error will return build number\n     */\n    /**\n     * Callback for getBuild\n     *\n     * @typedef {Function} getBuildCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Object|null} build - Build details\n     */\n    /**\n     * Callback for getChangesFromBuild\n     *\n     * @typedef {Function} getChangesFromBuildCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Array|null} result - List of changes\n     */\n    /**\n     * Callback for getJiraIssuesFromBuild\n     *\n     * @typedef {Function} getJiraIssuesFromBuildCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Array|null} result - List of JIRA tasks\n     */\n    /**\n     * Callback for getArtifactContent\n     *\n     * @typedef {Function} getArtifactContentCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {String|null} result - content of an artifact\n     */\n    /**\n     * Callback for getAllPlans\n     *\n     * @typedef {Function} getAllPlansCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Array|null} result - if no error will return list of plans\n     */\n    /**\n     * Callback for getAllBuilds\n     *\n     * @typedef {Function} getAllBuildsCallback\n     * @param {Error|null} error - will return null if no error happen\n     * @param {Array|null} result - if no error will return list of builds\n     */\n\n    /**\n     * @param {String} host - hostname. By default 'http://localhost:8085'\n     * @param {String|null} username - optional param for base HTTP authentication. Username\n     * @param {String|null} password - optional param for base HTTP authentication. Password\n     * @constructor\n     */\n    constructor(host = 'http://localhost:8085', username = null, password = null) {\n\n        if (username && password) {\n            let protocol = host.match(/(^|\\s)(https?:\\/\\/)/i);\n\n            if (Array.isArray(protocol)) {\n                protocol = protocol[0];\n\n                let url = host.substr(protocol.length);\n                host = protocol + username + ':' + password + '@' + url;\n            }\n        }\n\n        this.host = host;\n        this.defaultRequestOptions = {\n            keepAlive: true,\n            keepAliveMsecs: 5000\n        };\n    }\n\n    doApiRequest(options, callback) {\n        let requestOptions = {},\n            self = this;\n        Object.assign(requestOptions, this.defaultRequestOptions, options);\n\n        request(requestOptions, (error, response, body) => {\n            callback.call(self, error, response, body);\n        });\n    }\n\n    /**\n     * Requests a lightweight API resource to ensure its available\n     *\n     * @param {testLoginCallback} callback\n     */\n    testLogin(callback) {\n        let serverVersionUri = this.host + '/rest/api/latest/plan.json?os_authType=basic';\n\n        this.doApiRequest({uri: serverVersionUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, false);\n                return;\n            }\n\n            try {\n                let bodyJson = JSON.parse(body);\n                if (!bodyJson || !bodyJson.plans) {\n                    callback(new Error(`Unexpected response: ${body}`), false);\n                }\n            } catch (err) {\n                callback(err, false);\n            }\n\n            callback(null, true);\n        });\n    }\n\n    /**\n     * Returns the latest successful build number\n     *\n     * @param {String} planKey - Bamboo plan key, like 'PROJECT_KEY-PLAN_KEY'\n     * @param {String|Boolean} params - Query string. E.g. 'expand=something'. Could be false\n     * @param {getLatestSuccessfulBuildNumberCallback} callback\n     * @param {Number} [startIndex] - If given, request with start-index parameter\n     */\n    getLatestSuccessfulBuildNumber(planKey, params, callback, startIndex = null) {\n        params = params || '';\n        let indexParam = (startIndex ? `&start-index=${startIndex}` : ''),\n            self = this,\n            planUri = `${self.host}/rest/api/latest/result/${planKey}.json?os_authType=basic${params}${indexParam}`;\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrorsWithResult(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                results = bodyJson.results,\n                result = results.result;\n\n            // Search for the latest 'Successful' build\n            for (let entry of result) {\n                if (entry.state !== 'Successful') {\n                    continue;\n                }\n\n                callback(null, entry.number);\n                return;\n            }\n\n            // Loop through the next series of builds\n            let newIndex = results['max-result'] + results['start-index'];\n            if (newIndex < results.size) {\n                self.getLatestSuccessfulBuildNumber(planKey, params, (error, result) => {\n                    callback(error, result);\n                }, newIndex);\n                return;\n            }\n\n            callback(new Error('The plan doesn\\'t contain any successful build'), null);\n        });\n    }\n\n    /**\n     * Returns latest build status: state and number\n     *\n     * @param {String} planKey - Bamboo plan key, like 'PROJECT_KEY-PLAN_KEY'\n     * @param {getLatestBuildStatusCallback} callback\n     */\n    getLatestBuildStatus(planKey, callback) {\n        let planUri = `${this.host}/rest/api/latest/result/${planKey}.json?os_authType=basic`;\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrorsWithResult(error, response);\n            if (errors) {\n                callback(errors, null, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                results = bodyJson.results,\n                lastResult = results.result[0];\n\n            callback(null, lastResult.state, lastResult.number);\n        });\n    }\n\n    /**\n     * Returns the build\n     *\n     * @param {String} buildKey - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY-BUILD_NUMBER'\n     * @param {String|Boolean} params - Appending query string. E.g. 'expand=something'. Could be false\n     * @param {getBuildCallback} callback\n     */\n    getBuild(buildKey, params, callback) {\n        params = params || '';\n        let planUri = `${this.host}/rest/api/latest/result/${buildKey}.json?os_authType=basic&${params}`;\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body);\n\n            callback(null, bodyJson);\n        });\n    }\n\n    /**\n     * Returns the changes associated to a specific build. It also considers a dependent plan recursively\n     *\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\n     * @param {getChangesFromBuildCallback} callback\n     */\n    getChangesFromBuild(buildDetails, callback) {\n        let self = this,\n            planUri = `${self.host}/rest/api/latest/result/${buildDetails}.json?os_authType=basic&expand=changes`;\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                changes = bodyJson.changes.change,\n                buildReason = bodyJson.buildReason,\n                changeNames = [];\n\n            for (let change of changes) {\n                changeNames.push(change.fullName);\n            }\n\n            changeNames = [...new Set(changeNames)];\n\n            if (!buildReason || buildReason.includes('Child of') === false) {\n                callback(null, changeNames);\n                return;\n            }\n\n            let dependentPlan = buildReason.substring(buildReason.indexOf('>') + 1).replace('</a>', '');\n\n            // Search for JIRA issues coming from the dependent plan\n            self.getChangesFromBuild(dependentPlan, (error, result) => {\n                let errors = Bamboo.checkErrors(error, response);\n                if (errors) {\n                    callback(errors, null);\n                    return;\n                }\n\n                callback(null, [...new Set(changeNames.concat(result))]);\n            });\n        });\n    }\n\n    /**\n     * Returns the jira issues associated to a specific build. It also considers a dependent plan\n     *\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\n     * @param {getJiraIssuesFromBuildCallback} callback\n     */\n    getJiraIssuesFromBuild(buildDetails, callback) {\n        let self = this,\n            planUri = `${self.host}/rest/api/latest/result/${buildDetails}.json?os_authType=basic&expand=jiraIssues`;\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                jiraIssues = bodyJson.jiraIssues.issue,\n                buildReason = bodyJson.buildReason,\n                jiraNumbers = [];\n\n            for (let issue of jiraIssues) {\n                jiraNumbers.push(issue.key);\n            }\n\n            jiraNumbers = [...new Set(jiraNumbers)];\n\n            if (buildReason.includes('Child of')) {\n                let dependentPlan = buildReason.substring(buildReason.indexOf('>') + 1).replace('</a>', '');\n\n                // Search for JIRA issues coming from the dependent plan\n                self.getJiraIssuesFromBuild(dependentPlan, (error, result) => {\n                    let errors = Bamboo.checkErrors(error, response);\n                    if (errors) {\n                        callback(errors, null);\n                        return;\n                    }\n\n                    callback(null, [...new Set(jiraNumbers.concat(result))]);\n                });\n                return;\n            }\n\n            callback(null, jiraNumbers);\n        });\n    }\n\n    /**\n     * Returns the content of an artifact associated to a build\n     *\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\n     * @param {String} artifactName - Artifact name\n     * @param {getArtifactContentCallback} callback\n     */\n    getArtifactContent(buildDetails, artifactName, callback) {\n        let artifactUri = `${this.host}/browse/${buildDetails}/artifact/shared/${artifactName}/${artifactName}?os_authType=basic`;\n\n        this.doApiRequest({uri: artifactUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            callback(null, body.toString('utf-8', 0));\n        });\n    }\n\n    /**\n     * Returns the list of plans, key and names available\n     *\n     * @param {String|Boolean} params - Query string. E.g. 'expand=something'. Could be false\n     * @param {getAllPlansCallback} callback\n     * @param {Array=} currentPlans - List of plans available (each plan has a 'key' and a 'name' value)\n     * @param {Number|null} startIndex - If given, request with start-index parameter\n     */\n    getAllPlans(params, callback, currentPlans, startIndex = null) {\n        params = params || '';\n\n        let indexParam = (startIndex ? `&start-index=${startIndex}` : ''),\n            self = this,\n            planUri = `${self.host}/rest/api/latest/plan.json?os_authType=basic${params}${indexParam}`;\n\n        currentPlans = currentPlans || [];\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                plans = bodyJson.plans;\n\n            if (plans.plan.length === 0) {\n                callback(new Error('No plans available'), null);\n                return;\n            }\n\n            for (let plan of plans.plan) {\n                currentPlans.push({\n                    key: plan.key,\n                    name: plan.name\n                });\n            }\n\n            // Loop through the next series of plans\n            let newIndex = plans['max-result'] + plans['start-index'];\n            if (newIndex < plans.size) {\n                self.getAllPlans(params, (error, result) => {\n                    let errors = Bamboo.checkErrors(error, response);\n\n                    if (errors) {\n                        callback(errors, null);\n                        return;\n                    }\n\n                    callback(null, result);\n                }, currentPlans, newIndex);\n                return;\n            }\n\n            callback(null, currentPlans);\n        });\n    }\n\n    /**\n     * Returns the list of the last builds with full details\n     *\n     * @param {String|Boolean} params - Appending query string. E.g. 'expand=something'. Could be false\n     * @param {getAllBuildsCallback} callback\n     * @param {Array=} currentBuilds - List of build already fetched\n     * @param {Number|null} startIndex - If given, request with start-index parameter\n     */\n    getAllBuilds(params, callback, currentBuilds, startIndex = null) {\n        params = params || '';\n\n        let indexParam = (startIndex ? `&start-index=${startIndex}` : ''),\n            self = this,\n            planUri = `${self.host}/rest/api/latest/result.json?os_authType=basic${params}${indexParam}`;\n\n        currentBuilds = currentBuilds || [];\n\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\n            let errors = Bamboo.checkErrors(error, response);\n            if (errors) {\n                callback(errors, null);\n                return;\n            }\n\n            let bodyJson = JSON.parse(body),\n                results = bodyJson.results;\n\n            if (results.result.length === 0) {\n                callback(new Error('No builds available'), null);\n                return;\n            }\n\n            for (let result of results.result) {\n                currentBuilds.push(result);\n            }\n\n            // Loop through the next series of builds\n            let newIndex = results['max-result'] + results['start-index'];\n            if (newIndex < results.size) {\n                self.getAllBuilds(params, (error, result) => {\n                    let errors = Bamboo.checkErrors(error, response);\n\n                    if (errors) {\n                        callback(errors, null);\n                        return;\n                    }\n\n                    callback(null, result);\n                }, currentBuilds, newIndex);\n                return;\n            }\n\n            callback(null, currentBuilds);\n        });\n    }\n\n    /**\n     * Method checks for errors in error and server response\n     * Additionally parsing response body and checking if it contain any results\n     *\n     * @param {Error|null} error\n     * @param {Object} response\n     * @returns {Error|Boolean} if error, will return Error otherwise false\n     * @protected\n     */\n    static checkErrorsWithResult(error, response) {\n        let errors = Bamboo.checkErrors(error, response);\n        if (errors !== false) {\n            return errors;\n        }\n\n        let body = JSON.parse(response.body),\n            results = body.results;\n\n        if (typeof results === 'undefined' || results.result.length === 0) {\n            return new Error('The plan doesn\\'t contain any result');\n        }\n\n        return false;\n    }\n\n    /**\n     * Method checks for errors in error and server response\n     *\n     * @param {Error|null} error\n     * @param {Object} response\n     * @returns {Error|Boolean} if error, will return Error otherwise false\n     * @protected\n     */\n    static checkErrors(error, response) {\n        if (error) {\n            return error instanceof Error ? error : new Error(error);\n        }\n\n        if (response.statusCode !== 200) {\n            return new Error('Unreachable endpoint');\n        }\n\n        return false;\n    }\n}\n"],"sourceRoot":"c:\\Users\\t-moennich\\Projekte\\atlassian-bamboo-api\\lib"}