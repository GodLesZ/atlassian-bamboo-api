{"version":3,"sources":["Bamboo.js"],"names":[],"mappings":"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","file":"Bamboo.js","sourcesContent":["\"use strict\";\r\n\r\nimport request from 'request';\r\nimport stream from 'stream';\r\n\r\n// @TODO: Use Sets instead of arrays\r\n\r\n//noinspection JSUnusedGlobalSymbols\r\nexport default class Bamboo {\r\n\r\n    /**\r\n     * Callback for testLogin\r\n     *\r\n     * @typedef {Function} testLoginCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {bool} result - true if no error\r\n     */\r\n    /**\r\n     * Callback for getLatestSuccessfulBuildNumber\r\n     *\r\n     * @typedef {Function} getLatestSuccessfulBuildNumberCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {String|null} result - if no error will return build number\r\n     */\r\n    /**\r\n     * Callback for getLatestBuildStatus\r\n     *\r\n     * @typedef {Function} getLatestBuildStatusCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {String|null} state - last result state if no error will return build number\r\n     * @param {String|null} number - last result number if no error will return build number\r\n     */\r\n    /**\r\n     * Callback for getBuild\r\n     *\r\n     * @typedef {Function} getBuildCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {Object|null} build - Build details\r\n     */\r\n    /**\r\n     * Callback for getChangesFromBuild\r\n     *\r\n     * @typedef {Function} getChangesFromBuildCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {Array|null} result - List of changes\r\n     */\r\n    /**\r\n     * Callback for getJiraIssuesFromBuild\r\n     *\r\n     * @typedef {Function} getJiraIssuesFromBuildCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {Array|null} result - List of JIRA tasks\r\n     */\r\n    /**\r\n     * Callback for getArtifactContent\r\n     *\r\n     * @typedef {Function} getArtifactContentCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {String|null} result - content of an artifact\r\n     */\r\n    /**\r\n     * Callback for getAllPlans\r\n     *\r\n     * @typedef {Function} getAllPlansCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {Array|null} result - if no error will return list of plans\r\n     */\r\n    /**\r\n     * Callback for getAllBuilds\r\n     *\r\n     * @typedef {Function} getAllBuildsCallback\r\n     * @param {Error|null} error - will return null if no error happen\r\n     * @param {String|null} result - if no error will return list of builds\r\n     */\r\n\r\n    /**\r\n     * @param {String} host - hostname. By default 'http://localhost:8085'\r\n     * @param {String|null} username - optional param for base HTTP authentication. Username\r\n     * @param {String|null} password - optional param for base HTTP authentication. Password\r\n     * @constructor\r\n     */\r\n    constructor(host = 'http://localhost:8085', username = null, password = null) {\r\n\r\n        if (username && password) {\r\n            let protocol = host.match(/(^|\\s)(https?:\\/\\/)/i);\r\n\r\n            if (Array.isArray(protocol)) {\r\n                protocol = protocol[0];\r\n\r\n                let url = host.substr(protocol.length);\r\n                host    = protocol + username + ':' + password + '@' + url;\r\n            }\r\n        }\r\n\r\n        this.host = host;\r\n        this.defaultRequestOptions = {\r\n            keepAlive: true,\r\n            keepAliveMsecs: 5000\r\n        };\r\n    }\r\n\r\n    doApiRequest(options, callback) {\r\n        let requestOptions = {},\r\n            self = this;\r\n        Object.assign(requestOptions, this.defaultRequestOptions, options);\r\n\r\n        request(requestOptions, (error, response, body) => {\r\n            callback.call(self, error, response, body);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests a lightweight API resource to ensure its available\r\n     *\r\n     * @param {testLoginCallback} callback\r\n     */\r\n    testLogin(callback) {\r\n        let serverVersionUri = this.host + '/rest/api/latest/info.json';\r\n\r\n        this.doApiRequest({uri: serverVersionUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, false);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                let bodyJson = JSON.parse(body);\r\n                if (!bodyJson || !bodyJson.version) {\r\n                    callback(new Error(`Unexpected response: ${body}`), false);\r\n                }\r\n            } catch (err) {\r\n                callback(err, false);\r\n            }\r\n\r\n            callback(null, true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the latest successful build number\r\n     *\r\n     * @param {String} planKey - Bamboo plan key, like 'PROJECT_KEY-PLAN_KEY'\r\n     * @param {String|Boolean} params - Query string. E.g. 'expand=something'. Could be false\r\n     * @param {getLatestSuccessfulBuildNumberCallback} callback\r\n     * @param {Number|null} startIndex - If given, request with start-index parameter\r\n     */\r\n    getLatestSuccessfulBuildNumber(planKey, params, callback, startIndex = null) {\r\n        params = params || '';\r\n        startIndex = (startIndex ? `&start-index=${startIndex}` : '');\r\n\r\n        let self    = this,\r\n            planUri = `${self.host}/rest/api/latest/result/${planKey}.json?${params}${startIndex}`;\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrorsWithResult(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson = JSON.parse(body),\r\n                results  = bodyJson.results,\r\n                result   = results.result;\r\n\r\n            // Search for the latest 'Successful' build\r\n            for (let entry of result) {\r\n                if (entry.state !== 'Successful') {\r\n                    continue;\r\n                }\r\n\r\n                callback(null, entry.number);\r\n                return;\r\n            }\r\n\r\n            // Loop through the next series of builds\r\n            let newIndex = results['max-result'] + results['start-index'];\r\n            if (newIndex < results.size) {\r\n                self.getLatestSuccessfulBuildNumber(planKey, params, (error, result) => {\r\n                    callback(error, result);\r\n                }, newIndex);\r\n                return;\r\n            }\r\n\r\n            callback(new Error('The plan doesn\\'t contain any successful build'), null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns latest build status: state and number\r\n     *\r\n     * @param {String} planKey - Bamboo plan key, like 'PROJECT_KEY-PLAN_KEY'\r\n     * @param {getLatestBuildStatusCallback} callback\r\n     */\r\n    getLatestBuildStatus(planKey, callback) {\r\n        let planUri = `${this.host}/rest/api/latest/result/${planKey}.json`;\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrorsWithResult(error, response);\r\n            if (errors) {\r\n                callback(errors, null, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson   = JSON.parse(body),\r\n                results    = bodyJson.results,\r\n                lastResult = results.result[0];\r\n\r\n            callback(null, lastResult.state, lastResult.number);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the build\r\n     *\r\n     * @param {String} buildKey - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY-BUILD_NUMBER'\r\n     * @param {String|Boolean} params - Appending query string. E.g. 'expand=something'. Could be false\r\n     * @param {getBuildCallback} callback\r\n     */\r\n    getBuild(buildKey, params, callback) {\r\n        params = params || '';\r\n        let planUri = `${this.host}/rest/api/latest/result/${buildKey}.json?${params}`;\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson = JSON.parse(body);\r\n\r\n            callback(null, bodyJson);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the changes associated to a specific build. It also considers a dependent plan recursively\r\n     *\r\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\r\n     * @param {getChangesFromBuildCallback} callback\r\n     */\r\n    getChangesFromBuild(buildDetails, callback) {\r\n        let self    = this,\r\n            planUri = `${self.host}/rest/api/latest/result/${buildDetails}.json?expand=changes`;\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson    = JSON.parse(body),\r\n                changes     = bodyJson.changes.change,\r\n                buildReason = bodyJson.buildReason,\r\n                changeNames = [];\r\n\r\n            for (let change of changes) {\r\n                changeNames.push(change.fullName);\r\n            }\r\n\r\n            changeNames = [...new Set(changeNames)];\r\n\r\n            if (!buildReason || buildReason.includes('Child of') === false) {\r\n                callback(null, changeNames);\r\n                return;\r\n            }\r\n\r\n            let dependentPlan = buildReason.substring(buildReason.indexOf('>') + 1).replace('</a>', '');\r\n\r\n            // Search for JIRA issues coming from the dependent plan\r\n            self.getChangesFromBuild(dependentPlan, (error, result) => {\r\n                let errors = Bamboo.checkErrors(error, response);\r\n                if (errors) {\r\n                    callback(errors, null);\r\n                    return;\r\n                }\r\n\r\n                callback(null, [...new Set(changeNames.concat(result))]);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the jira issues associated to a specific build. It also considers a dependent plan\r\n     *\r\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\r\n     * @param {getJiraIssuesFromBuildCallback} callback\r\n     */\r\n    getJiraIssuesFromBuild(buildDetails, callback) {\r\n        let self    = this,\r\n            planUri = `${self.host}/rest/api/latest/result/${buildDetails}.json?expand=jiraIssues`;\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson    = JSON.parse(body),\r\n                jiraIssues  = bodyJson.jiraIssues.issue,\r\n                buildReason = bodyJson.buildReason,\r\n                jiraNumbers = [];\r\n\r\n            for (let issue of jiraIssues) {\r\n                jiraNumbers.push(issue.key);\r\n            }\r\n\r\n            jiraNumbers = [...new Set(jiraNumbers)];\r\n\r\n            if (buildReason.includes('Child of')) {\r\n                let dependentPlan = buildReason.substring(buildReason.indexOf('>') + 1).replace('</a>', '');\r\n\r\n                // Search for JIRA issues coming from the dependent plan\r\n                self.getJiraIssuesFromBuild(dependentPlan, (error, result) => {\r\n                    let errors = Bamboo.checkErrors(error, response);\r\n                    if (errors) {\r\n                        callback(errors, null);\r\n                        return;\r\n                    }\r\n\r\n                    callback(null, [...new Set(jiraNumbers.concat(result))]);\r\n                });\r\n                return;\r\n            }\r\n\r\n            callback(null, jiraNumbers);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the content of an artifact associated to a build\r\n     *\r\n     * @param {String} buildDetails - Bamboo plan key + build number, like 'PROJECT_KEY-PLAN_KEY/BUILD_NUMBER'\r\n     * @param {String} artifactName - Artifact name\r\n     * @param {getArtifactContentCallback} callback\r\n     */\r\n    getArtifactContent(buildDetails, artifactName, callback) {\r\n        let artifactUri = `${this.host}/browse/${buildDetails}/artifact/shared/${artifactName}/${artifactName}`;\r\n\r\n        this.doApiRequest({uri: artifactUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            callback(null, body.toString('utf-8', 0));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the list of plans, key and names available\r\n     *\r\n     * @param {String|Boolean} params - Query string. E.g. 'expand=something'. Could be false\r\n     * @param {getAllPlansCallback} callback\r\n     * @param {Array=} currentPlans - List of plans available (each plan has a 'key' and a 'name' value)\r\n     * @param {Number|null} startIndex - If given, request with start-index parameter\r\n     */\r\n    getAllPlans(params, callback, currentPlans, startIndex = null) {\r\n        params = params || '';\r\n        startIndex = (startIndex ? `&start-index=${startIndex}` : '');\r\n\r\n        let self    = this,\r\n            planUri = `${self.host}/rest/api/latest/plan.json?${params}${startIndex}`;\r\n\r\n        currentPlans = currentPlans || [];\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson = JSON.parse(body),\r\n                plans    = bodyJson.plans;\r\n\r\n            if (plans.plan.length === 0) {\r\n                callback(new Error('No plans available'), null);\r\n                return;\r\n            }\r\n\r\n            for (let plan of plans.plan) {\r\n                currentPlans.push({\r\n                    key:  plan.key,\r\n                    name: plan.name\r\n                });\r\n            }\r\n\r\n            // Loop through the next series of plans\r\n            let newIndex = plans['max-result'] + plans['start-index'];\r\n            if (newIndex < plans.size) {\r\n                self.getAllPlans(params, (error, result) => {\r\n                    let errors = Bamboo.checkErrors(error, response);\r\n\r\n                    if (errors) {\r\n                        callback(errors, null);\r\n                        return;\r\n                    }\r\n\r\n                    callback(null, result);\r\n                }, currentPlans, newIndex);\r\n                return;\r\n            }\r\n\r\n            callback(null, currentPlans);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the list of the last builds with full details\r\n     *\r\n     * @param {String|Boolean} params - Appending query string. E.g. 'expand=something'. Could be false\r\n     * @param {getAllBuildsCallback} callback\r\n     * @param {Array=} currentBuilds - List of build already fetched\r\n     * @param {Number|null} startIndex - If given, request with start-index parameter\r\n     */\r\n    getAllBuilds(params, callback, currentBuilds, startIndex = null) {\r\n        params = params || '';\r\n        startIndex = (startIndex ? `&start-index=${startIndex}` : '');\r\n\r\n        let self    = this,\r\n            planUri = `${self.host}/rest/api/latest/result.json?${params}${startIndex}`;\r\n\r\n        currentBuilds = currentBuilds || [];\r\n\r\n        this.doApiRequest({uri: planUri}, (error, response, body) => {\r\n            let errors = Bamboo.checkErrors(error, response);\r\n            if (errors) {\r\n                callback(errors, null);\r\n                return;\r\n            }\r\n\r\n            let bodyJson = JSON.parse(body),\r\n                results    = bodyJson.results;\r\n\r\n            if (results.result.length === 0) {\r\n                callback(new Error('No builds available'), null);\r\n                return;\r\n            }\r\n\r\n            for (let result of results.result) {\r\n                currentBuilds.push(result);\r\n            }\r\n\r\n            // Loop through the next series of builds\r\n            let newIndex = results['max-result'] + results['start-index'];\r\n            if (newIndex < results.size) {\r\n                self.getAllBuilds(params, (error, result) => {\r\n                    let errors = Bamboo.checkErrors(error, response);\r\n\r\n                    if (errors) {\r\n                        callback(errors, null);\r\n                        return;\r\n                    }\r\n\r\n                    callback(null, result);\r\n                }, currentBuilds, newIndex);\r\n                return;\r\n            }\r\n\r\n            callback(null, currentBuilds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Method checks for errors in error and server response\r\n     * Additionally parsing response body and checking if it contain any results\r\n     *\r\n     * @param {Error|null} error\r\n     * @param {Object} response\r\n     * @returns {Error|Boolean} if error, will return Error otherwise false\r\n     * @protected\r\n     */\r\n    static checkErrorsWithResult(error, response) {\r\n        let errors = Bamboo.checkErrors(error, response);\r\n        if (errors !== false) {\r\n            return errors;\r\n        }\r\n\r\n        let body    = JSON.parse(response.body),\r\n            results = body.results;\r\n\r\n        if (typeof results === 'undefined' || results.result.length === 0) {\r\n            return new Error('The plan doesn\\'t contain any result');\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Method checks for errors in error and server response\r\n     *\r\n     * @param {Error|null} error\r\n     * @param {Object} response\r\n     * @returns {Error|Boolean} if error, will return Error otherwise false\r\n     * @protected\r\n     */\r\n    static checkErrors(error, response) {\r\n        if (error) {\r\n            return error instanceof Error ? error : new Error(error);\r\n        }\r\n\r\n        if (response.statusCode !== 200) {\r\n            return new Error('Unreachable endpoint');\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"],"sourceRoot":"x:\\_interne_sites\\_svn\\t-moennich\\atlassian-bamboo-api\\lib"}